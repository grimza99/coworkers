# name: prod CI/CD

# on:
#   pull_request:
#     branches: [main]

# jobs:
#   dockerize:
#     name: Dockerize
#     environment:
#       name: Production
#     runs-on: ubuntu-latest
#     outputs:
#       image_name: ${{ steps.docker_build_push.outputs.image_name }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build & push Docker image
#         id: docker_build_push
#         run: |
#           IMAGE_NAME="seokjunk/coworkers:prod-${{ github.sha }}"
#           echo "Building image: $IMAGE_NAME"
#           docker build \
#             --build-arg NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} \
#             --build-arg NEXT_PUBLIC_DEFAULT_IMAGE=${{ vars.NEXT_PUBLIC_DEFAULT_IMAGE }} \
#             --build-arg NEXT_PUBLIC_KAKAO_CLIENT_ID=${{ vars.NEXT_PUBLIC_KAKAO_CLIENT_ID }} \
#             --build-arg NEXT_PUBLIC_KAKAO_REDIRECT_URI=${{ vars.NEXT_PUBLIC_KAKAO_REDIRECT_URI }} \
#             -t $IMAGE_NAME .
#           echo "Pushing image: $IMAGE_NAME"
#           docker push $IMAGE_NAME
#           echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

#   deploy:
#     name: Deploy to production EC2
#     needs: dockerize
#     environment:
#       name: Production
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to production EC2
#         uses: appleboy/ssh-action@v1
#         with:
#           host: ${{ secrets.PRODUCTION_HOST }}
#           username: ${{ secrets.PRODUCTION_USER }}
#           key: ${{ secrets.PRODUCTION_SSH_KEY }}
#           script: |
#             echo "Pulling image: ${{ needs.dockerize.outputs.image_name }}"
#             docker pull ${{ needs.dockerize.outputs.image_name }}

#             if docker ps -a --format '{{.Names}}' | grep -q coworkers-production; then
#               echo "Stopping and removing existing coworkers-production container"
#               docker stop coworkers-production
#               docker rm coworkers-production
#             fi

#             echo "Running new container with image: ${{ needs.dockerize.outputs.image_name }}"
#             docker run -d \
#               --name coworkers-production \
#               -p 80:3000 \
#               ${{ needs.dockerize.outputs.image_name }}
#             echo "Deployment script finished."

#             echo "Pruning unused Docker images..."
#             docker image prune -a -f || echo "Docker image prune command failed or no images to prune."

#   notify:
#     name: Notify PR
#     needs: [dockerize, deploy]
#     environment:
#       name: Production
#     runs-on: ubuntu-latest
#     permissions:
#       pull-requests: write
#     steps:
#       - name: Comment on PR (Success)
#         if: needs.deploy.result == 'success' && github.event_name == 'pull_request'
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             github.rest.issues.createComment({
#               issue_number: context.payload.pull_request.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: "✅ Production 배포가 성공적으로 완료되었습니다! 🚀\nDocker Image: `${{ needs.dockerize.outputs.image_name }}`\nURL: http://${{ vars.PRODUCTION_URL }}"
#             })

#       - name: Comment on PR (Failure)
#         if: needs.deploy.result == 'failure' && github.event_name == 'pull_request'
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             github.rest.issues.createComment({
#               issue_number: context.payload.pull_request.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: "❌ Production 배포를 실패했습니다. 워크플로우 로그를 확인해주세요."
#             })
